(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{858:function(t,i,a){"use strict";a.r(i);var v=a(18),s=Object(v.a)({},(function(){var t=this,i=t.$createElement,a=t._self._c||i;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第一行代码笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一行代码笔记"}},[t._v("#")]),t._v(" 第一行代码笔记")]),t._v(" "),a("h2",{attrs:{id:"第二章-快速入门-kotlin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二章-快速入门-kotlin"}},[t._v("#")]),t._v(" 第二章 快速入门 Kotlin")]),t._v(" "),a("h2",{attrs:{id:"第三章-activity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三章-activity"}},[t._v("#")]),t._v(" 第三章 Activity")]),t._v(" "),a("h3",{attrs:{id:"activity-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activity-生命周期"}},[t._v("#")]),t._v(" Activity 生命周期")]),t._v(" "),a("p",[t._v("onCreate() 这个方法在 Activity 第一次被创建的时候调用。")]),t._v(" "),a("p",[t._v("onStart() 这个方法在 Activity 由不可见变为可见的时候调用。")]),t._v(" "),a("p",[t._v("onResume() 这个方法在 Activity 准备好和用户进行交互的时候调用。")]),t._v(" "),a("p",[t._v("onPause() 这个方法在系统准备去启动或者恢复另一个 Activity 的时候调用。")]),t._v(" "),a("p",[t._v("onStop() 这个方法在 Activity 完全不可见的时候调用。")]),t._v(" "),a("p",[t._v("onDestroy() 这个方法在 Activity 被销毁之前调用。")]),t._v(" "),a("p",[t._v("onRestart() 这个方法在 Activity 由停止状态变为运行状态之前调用，也就是 Activity 被重新启动了。")]),t._v(" "),a("h3",{attrs:{id:"activity-启动模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activity-启动模式"}},[t._v("#")]),t._v(" Activity 启动模式")]),t._v(" "),a("h4",{attrs:{id:"standard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#standard"}},[t._v("#")]),t._v(" standard")]),t._v(" "),a("p",[t._v("standard 是 Activity 默认的启动模式，在不进行显式指定的情况下，所有 Activity 都会自动使用这种启动模式。")]),t._v(" "),a("p",[t._v("在 standard 模式下，每当启动一个新的 Activity，它就会在返回栈中入栈，并处于栈顶的位置。")]),t._v(" "),a("p",[t._v("对于使用 standard 模式的 Activity，系统不会在乎这个 Activity 是否已经在返回栈中存在，每次启动都会创建一个该 Activity 的新实例。")]),t._v(" "),a("p",[t._v("直接创建新的 Activity")]),t._v(" "),a("h4",{attrs:{id:"singletop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singletop"}},[t._v("#")]),t._v(" singleTOP")]),t._v(" "),a("p",[t._v("当 Activity 的启动模式指定为 singleTop，在启动 Activity 时如果发现返回栈的栈顶已经是该 Activity，则认为可以直接使用它，不会再创建新的 Activity 实例。")]),t._v(" "),a("p",[t._v("当前栈顶是此 Activity 则使用它")]),t._v(" "),a("h4",{attrs:{id:"singletask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singletask"}},[t._v("#")]),t._v(" singleTask")]),t._v(" "),a("p",[t._v("当 Activity 的启动模式指定为 singleTask，每次启动该 Activity 时，系统首先会在返回栈中检查是否存在该 Activity 的实例，如果发现已经存在则直接使用该实例，并把在这个 Activity 之上的所有其他 Activity 统统出栈，如果没有发现就会创建一个新的 Activity 实例。")]),t._v(" "),a("p",[t._v("当前栈中有这个活动则用它, 并将它置于栈顶(将位于它之上的活动移出栈)")]),t._v(" "),a("h4",{attrs:{id:"singleinstance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singleinstance"}},[t._v("#")]),t._v(" singleInstance")]),t._v(" "),a("p",[t._v("当 Activity 的启动模式指定为 singleInstance，会启用一个新的返回栈来管理这个 Activity。")]),t._v(" "),a("p",[a("strong",[t._v("假设我们的程序中有一个 Activity 是允许其他程序调用的，如果想实现其他程序和我们的程序可以共享这个 Activity 的实例，就可以使用 singleInstance 模式。")])]),t._v(" "),a("p",[t._v("在这种模式下，会有一个单独的返回栈来管理这个 Activity，不管是哪个应用程序来访问这个 Activity，都共用的同一个返回栈，也就解决了共享 Activity 实例的问题。")]),t._v(" "),a("h3",{attrs:{id:"kotlin-知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-知识"}},[t._v("#")]),t._v(" Kotlin 知识")]),t._v(" "),a("h4",{attrs:{id:"with-run-apply-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#with-run-apply-函数"}},[t._v("#")]),t._v(" with run apply 函数")]),t._v(" "),a("p",[t._v("lambda 表达式什么意思 上下文这个词到处都能听到, 却没人解释过意思")]),t._v(" "),a("h4",{attrs:{id:"定义静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义静态方法"}},[t._v("#")]),t._v(" 定义静态方法")])])}),[],!1,null,null,null);i.default=s.exports}}]);